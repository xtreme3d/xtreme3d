<HTML>
<HEAD>
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
<TITLE>Actor</TITLE>
<LINK href="../data/style.css" type=text/css rel=stylesheet>
</HEAD>
<BODY>

<DIV ALIGN=justify>

<H1 class=pagetitle>Actor</H1>

<A class=type>Класс: TGLActor</A><BR><BR>

<A>Актер (Actor) - анимированный объект, загружаемый из внешнего файла. Поддерживаются форматы MD2 (Quake 2), MD3 (Quake 3), MD5 (Doom 3), SMD (Half-Life), MDC (Return To Castle Wolfenstein).
<BR>Есть два типа анимации - вертексная и скелетная. В случае вертексной анимации, в памяти хранятся отдельные модели для каждого ключевого кадра. Вершины полигональной сетки просто интерполируются от одного положения к другому.
<BR>Скелетная анимация подразумевает наличие только одной модели в нейтральной позе и набора матриц, которые трансформируют отдельные части этой модели. Эти матрицы условно называют костями. Иными словами, в модель встроен "скелет" из этих костей - при повороте отдельной кости, поворачивается и соответствующая часть тела.
<BR><HR>

<A name="ActorCreate"></A>
<H1 class=name>ActorCreate</H1>
<A class=type>real</A><A> = </A><A class=function>ActorCreate</A><A>( filename as </A><A class=type>string</A><A>, matlib,parent as </A><A class=type>real</A> );</A>
<BR><A>Создает нового актера и возвращает его id.</A>
<BR><A>fname - путь к файлу модели</A>
<BR><A>matlib - библиотека материалов, которую следует использовать для хранения материалов модели</A>
<BR><A>parent - id родителя для актера (0 - отсутствие родителя).</A>
<HR>

<A name="ActorCopy"></A>
<H1 class=name>ActorCopy</H1>
<A class=type>real</A><A> = </A><A class=function>ActorCopy</A><A>( actor,parent as </A><A class=type>real</A> );</A>
<BR><A>Создает копию уже существующего актера и возвращает ее id.</A>
<BR><A>actor - id актера</A>
<BR><A>parent - id родителя для копии (0 - отсутствие родителя).</A>
<HR>

<A name="ActorSetAnimationRange"></A>
<H1 class=name>ActorSetAnimationRange</H1>
<A class=type>real</A><A> = </A><A class=function>ActorSetAnimationRange</A><A>( actor,start,end as </A><A class=type>real</A><A> );</A>
<BR><A>Задает начальный и конечный кадр анимации.</A>
<BR><A>actor - id актера</A>
<BR><A>start,end - начальный и конечный кадр. Отсчет кадров начинается с нуля.</A>
<HR>

<A name="ActorSetFrame"></A>
<H1 class=name>ActorSetFrame</H1>
<A class=type>real</A><A> = </A><A class=function>ActorSetFrame</A><A>( actor,frame as </A><A class=type>real</A><A> );</A>
<BR><A>Задает текущий кадр анимации.</A>
<BR><A>actor - id актера</A>
<BR><A>frame - кадр</A>
<HR>

<A name="ActorGetCurrentFrame"></A>
<H1 class=name>ActorGetCurrentFrame</H1>
<A class=type>real</A><A> = </A><A class=function>ActorGetCurrentFrame</A><A>( actor as </A><A class=type>real</A><A> );</A>
<BR><A>Возвращает текущий кадр анимации.</A>
<BR><A>actor - id актера</A>
<HR>


<A name="ActorSwitchToAnimation"></A>
<H1 class=name>ActorSwitchToAnimation</H1>
<A class=type>real</A><A> = </A><A class=function>ActorSwitchToAnimation</A><A>( actor,anim,smooth as </A><A class=type>real</A><A> );</A>
<BR><A>Совершает переход к заданной анимационной последовательности.</A>
<BR><A>actor - id актера</A>
<BR><A>anim - порядковый номер анимации</A>
<BR><A>smooth - плавный или резкий переход: </A><A class=constant>true</A><A> или </A><A class=constant>false</A><A> (1 и 0 соответственно).</A>
<HR>

<A name="ActorSwitchToAnimationName"></A>
<H1 class=name>ActorSwitchToAnimationName</H1>
<A class=type>real</A><A> = </A><A class=function>ActorSwitchToAnimationName</A><A>( actor as </A><A class=type>real</A><A>, anim as </A><A class=type>string</A><A>, smooth as </A><A class=type>real</A><A> );</A>
<BR><A>Совершает переход к заданной анимационной последовательности, определяемой именем.</A>
<BR><A>actor - id актера</A>
<BR><A>anim - имя анимации</A>
<BR><A>smooth - плавный или резкий переход: </A><A class=constant>true</A><A> или </A><A class=constant>false</A><A> (1 и 0 соответственно).</A>
<HR>

<A name="ActorAnimationNextFrame"></A>
<H1 class=name>ActorAnimationNextFrame</H1>
<A class=type>real</A><A> = </A><A class=function>ActorAnimationNextFrame</A><A>( actor as </A><A class=type>real</A><A> );</A>
<BR><A>Переключает кадр анимации на шаг вперед.</A>
<BR><A>actor - id актера</A>
<HR>

<A name="ActorAnimationPrevFrame"></A>
<H1 class=name>ActorAnimationPrevFrame</H1>
<A class=type>real</A><A> = </A><A class=function>ActorAnimationPrevFrame</A><A>( actor as </A><A class=type>real</A><A> );</A>
<BR><A>Переключает кадр анимации на шаг назад.</A>
<BR><A>actor - id актера</A>
<HR>

<A name="ActorSynchronize"></A>
<H1 class=name>ActorSynchronize</H1>
<A class=type>real</A><A> = </A><A class=function>ActorSynchronize</A><A>( actor1,actor2 as </A><A class=type>real</A><A> );</A>
<BR><A>Синхронизирует анимацию актера 1 с актером 2.</A>
<BR><A>actor1 - id актера 1</A>
<BR><A>actor2 - id актера 2.</A>
<HR>

<A name="ActorSetInterval"></A>
<H1 class=name>ActorSetInterval</H1>
<A class=type>real</A><A> = </A><A class=function>ActorSetInterval</A><A>( actor,interval as </A><A class=type>real</A><A> );</A>
<BR><A>Задает временной интервал интерполяции между двумя кадрами. Чем выше это значение - тем медленнее анимация.</A>
<BR><A>actor - id актера</A>
<BR><A>interval - интервал (в миллисекундах).</A>
<HR>

<A name="ActorSetAnimationMode"></A>
<H1 class=name>ActorSetAnimationMode</H1>
<A class=type>real</A><A> = </A><A class=function>ActorSetAnimationMode</A><A>( actor,aam as </A><A class=type>real</A><A> );</A>
<BR><A>Задает режим воспроизведения анимации.</A>
<BR><A>actor - id актера</A>
<BR><A>aam - режим анимации. Доступны следующие значения aam:</A>
<BR><A class=constant name="aamNone">aamNone</A><A> = 0 - анимация не воспроизводится;</A>
<BR><A class=constant name="aamPlayOnce">aamPlayOnce</A><A> = 1 - анимация воспроизводится один раз и останавливается при достижении конечного кадра;</A>
<BR><A class=constant name="aamLoop">aamLoop</A><A> = 2 - повторяется циклически (по умолчанию);</A>
<BR><A class=constant name="aamBounceForward">aamBounceForward</A><A> = 3 - повторяется циклически вперед до конечного кадра, затем в обратную сторону до начального кадра, затем опять вперед и так далее;</A>
<BR><A class=constant name="aamBounceBackward">aamBounceBackward</A><A> = 4 - то же самое, но в обратную сторону;</A>
<BR><A class=constant name="aamLoopBackward">aamLoopBackward</A><A> = 5 - повторяется циклически в обратную сторону.</A>
<HR>

<A name="ActorSetFrameInterpolation"></A>
<H1 class=name>ActorSetFrameInterpolation</H1>
<A class=type>real</A><A> = </A><A class=function>ActorSetFrameInterpolation</A><A>( actor,mode as </A><A class=type>real</A><A> );</A>
<BR><A>Включает или выключает линейную интерполяцию между кадрами. При выключенной интерполяции будет резкая смена кадров.</A>
<BR><A>actor - id актера</A>
<BR><A>mode - </A><A class=constant>true</A><A> или </A><A class=constant>false</A><A> (1 и 0 соответственно).</A>
<HR>

<A name="ActorAddObject"></A>
<H1 class=name>ActorAddObject</H1>
<A class=type>real</A><A> = </A><A class=function>ActorAddObject</A><A>( actor as </A><A class=type>real</A><A>, filename as </A><A class=type>string</A><A> );</A>
<BR><A>Особенность моделей формата SMD - раздельное хранение модели и анимации скелета. Данная функция добавляет актеру новую анимационную последовательность из файла SMD и присваивает ей порядковый номер. Отсчет ведется с 1.</A>
<BR><A>actor - id актера</A>
<BR><A>fname - путь к файлу *.smd с анимацией.</A>
<HR>

<A name="ActorAnimationDestroy"></A>
<H1 class=name>ActorAnimationDestroy</H1>
<A class=type>real</A><A> = </A><A class=function>ActorAnimationDestroy</A><A>( actor,index as </A><A class=type>real</A><A> );</A>
<BR><A>Удаляет анимацию актера под индексом index.</A>
<BR><A>actor - id актера</A>
<BR><A>index - индекс анимации</A>
<HR>

<A name="ActorGetCurrentAnimation"></A>
<H1 class=name>ActorGetCurrentAnimation</H1>
<A class=type>string,real</A><A> = </A><A class=function>ActorGetCurrentAnimation</A><A>( actor as </A><A class=type>real</A><A> );</A>
<BR><A>Возвращает текущую анимационную последовательность. Для моделей формата SMD это будет путь к файлу анимации без расширения, например 'models/animation1'. Для моделей MD2 и MD3 функция возвращает порядковый номер анимации.</A>
<BR><A>actor - id актера</A>
<HR>

<A name="ActorGetFrameCount"></A>
<H1 class=name>ActorGetFrameCount</H1>
<A class=type>real</A><A> = </A><A class=function>ActorGetFrameCount</A><A>( actor as </A><A class=type>real</A><A> );</A>
<BR><A>Возвращает общее количество кадров анимации.</A>
<BR><A>actor - id актера</A>
<HR>

<A name="ActorGetAnimationCount"></A>
<H1 class=name>ActorGetAnimationCount</H1>
<A class=type>real</A><A> = </A><A class=function>ActorGetAnimationCount</A><A>( actor as </A><A class=type>real</A><A> );</A>
<BR><A>Возвращает количество анимаций актера.</A>
<BR><A>actor - id актера</A>
<HR>

<A name="ActorGetAnimationName"></A>
<H1 class=name>ActorGetAnimationName</H1>
<A class=type>string</A><A> = </A><A class=function>ActorGetAnimationName</A><A>( actor,index as </A><A class=type>real</A><A> );</A>
<BR><A>Возвращает имя анимации под индексом index.</A>
<BR><A>actor - id актера</A>
<BR><A>index - индекс анимации</A>
<HR>

<A name="ActorGetBoneCount"></A>
<H1 class=name>ActorGetBoneCount</H1>
<A class=type>real</A><A> = </A><A class=function>ActorGetBoneCount</A><A>( actor as </A><A class=type>real</A><A> );</A>
<BR><A>Возвращает общее количество костей в скелете актера.</A>
<BR><A>actor - id актера</A>
<HR>

<A name="ActorGetBoneByName"></A>
<H1 class=name>ActorGetBoneByName</H1>
<A class=type>real</A><A> = </A><A class=function>ActorGetBoneByName</A><A>( actor as </A><A class=type>real</A><A>, bonename as </A><A class=type>string</A><A> );</A>
<BR><A>Возвращает индекс кости с заданным именем.</A>
<BR><A>actor - id актера</A>
<BR><A>bonename - имя кости.</A>
<HR>

<A name="ActorRotateBone"></A>
<H1 class=name>ActorRotateBone</H1>
<A class=type>real</A><A> = </A><A class=function>ActorRotateBone</A><A>( actor,boneindex,x,y,z as </A><A class=type>real</A><A> );</A>
<BR><A>Поворачивает кость.</A>
<BR><A>actor - id актера</A>
<BR><A>boneindex - индекс кости</A>
<BR><A>x,y,z - углы поворота по трем осям.</A>
<HR>

<A name="ActorGetBoneRotation"></A>
<H1 class=name>ActorGetBoneRotation</H1>
<A class=type>real</A><A> = </A><A class=function>ActorGetBoneRotation</A><A>( actor,boneindex,index as </A><A class=type>real</A><A> );</A>
<BR><A>Возвращает локальный угол поворота кости по заданной оси.</A>
<BR><A>actor - id актера</A>
<BR><A>boneindex - индекс кости</A>
<BR><A>index - ось x, y или z (0, 1 и 2 соответственно).</A>
<HR>

<A name="ActorMoveBone"></A>
<H1 class=name>ActorMoveBone</H1>
<A class=type>real</A><A> = </A><A class=function>ActorMoveBone</A><A>( actor,boneindex,x,y,z as </A><A class=type>real</A><A> );</A>
<BR><A>Перемещает кость.</A>
<BR><A>actor - id актера</A>
<BR><A>boneindex - индекс кости</A>
<BR><A>x,y,z - координаты смещения по трем осям.</A>
<HR>

<A name="ActorGetBonePosition"></A>
<H1 class=name>ActorGetBonePosition</H1>
<A class=type>real</A><A> = </A><A class=function>ActorGetBonePosition</A><A>( actor,boneindex,index as </A><A class=type>real</A><A> );</A>
<BR><A>Возвращает координату локального смещения кости по заданной оси.</A>
<BR><A>actor - id актера</A>
<BR><A>boneindex - индекс кости</A>
<BR><A>index - ось x, y или z (0, 1 и 2 соответственно).</A>
<HR>

<A name="ActorShowSkeleton"></A>
<H1 class=name>ActorShowSkeleton</H1>
<A class=type>real</A><A> = </A><A class=function>ActorShowSkeleton</A><A>( actor,mode as </A><A class=type>real</A><A> );</A>
<BR><A>Включает или выключает схематичное отображение скелета.</A>
<BR><A>actor - id актера</A>
<BR><A>mode - </A><A class=constant>true</A><A> или </A><A class=constant>false</A><A> (1 и 0 соответственно).</A>
<HR>

<A name="ActorBoneExportMatrix"></A>
<H1 class=name>ActorBoneExportMatrix</H1>
<A class=type>real</A><A> = </A><A class=function>ActorBoneExportMatrix</A><A>( actor,boneindex,object as </A><A class=type>real</A><A> );</A>
<BR><A>Копирует матрицу трансформации кости в локальную матрицу трансформации заданного объекта - иными словами, прикрепляет объект к кости. Матрица локальна относительно актера, поэтому для полноценного прикрепления объект нужно сделать дочерним по отношению к актеру. Эта функция незаменима, когда нужно, например дать в руки герою оружие или надеть на него броню.</A>
<BR><A>actor - id актера</A>
<BR><A>boneindex - индекс кости</A>
<BR><A>object - id объекта.</A>
<HR>

<A name="ActorMakeSkeletalTranslationStatic"></A>
<H1 class=name>ActorMakeSkeletalTranslationStatic</H1>
<A class=type>real</A><A> = </A><A class=function>ActorMakeSkeletalTranslationStatic</A><A>( actor,anim as </A><A class=type>real</A><A> );</A>
<BR><A>Некоторые модели SMD содержат смещение скелета в анимации ходьбы - данная функция устраняет это смещение.</A>
<BR><A>actor - id актера</A>
<BR><A>anim - порядковый номер анимации.</A>
<HR>

<A name="ActorMakeSkeletalRotationDelta"></A>
<H1 class=name>ActorMakeSkeletalRotationDelta</H1>
<A class=type>real</A><A> = </A><A class=function>ActorMakeSkeletalRotationDelta</A><A>( actor,anim as </A><A class=type>real</A><A> );</A>
<BR><A>Сведения отсутствуют.</A>
<BR><A>actor - id актера</A>
<BR><A>anim - порядковый номер анимации.</A>
<HR>

<A name="AnimationBlenderCreate"></A>
<H1 class=name>AnimationBlenderCreate</H1>
<A class=type>real</A><A> = </A><A class=function>AnimationBlenderCreate</A><A>( );</A>
<BR><A>Создает смешиватель анимации - объект, при помощи которого вы можете применить дополнительную анимацию к актеру.</A>
<HR>

<A name="AnimationBlenderSetActor"></A>
<H1 class=name>AnimationBlenderSetActor</H1>
<A class=type>real</A><A> = </A><A class=function>AnimationBlenderSetActor</A><A>( animblender,actor as </A><A class=type>real</A><A> );</A>
<BR><A>Применяет смешиватель анимации к актеру.</A>
<BR><A>animblender - id смешивателя анимации</A>
<BR><A>actor - id актера.</A>
<HR>

<A name="AnimationBlenderSetAnimation"></A>
<H1 class=name>AnimationBlenderSetAnimation</H1>
<A class=type>real</A><A> = </A><A class=function>AnimationBlenderSetAnimation</A><A>( animblender as </A><A class=type>real</A><A>, animname as </A><A class=type>string</A><A> );</A>
<BR><A>Задает анимацию, которую нужно смешать с основной анимацей актера.</A>
<BR><A>animblender - id смешивателя анимации</A>
<BR><A>animname - имя анимации.</A>
<HR>

<A name="AnimationBlenderSetRatio"></A>
<H1 class=name>AnimationBlenderSetRatio</H1>
<A class=type>real</A><A> = </A><A class=function>AnimationBlenderSetRatio</A><A>( animblender,ratio as </A><A class=type>real</A><A> );</A>
<BR><A>Устанавливает кадровую позицию смешиваемой анимации в виде значения от 0 до 1 (0 - первый кадр, 1 - последний кадр). Таким образом, основная и дополнительная анимации могут быть рассинхронизированы во времени, и вы можете контролировать их скорость по отдельности.</A>
<BR><A>animblender - id смешивателя анимации</A>
<BR><A>ratio - кадровая позиция.</A>
<HR>

<A name="ActorLoadQ3TagList"></A>
<H1 class=name>ActorLoadQ3TagList</H1>
<A class=type>real</A><A> = </A><A class=function>ActorLoadQ3TagList</A><A>( filename as </A><A class=type>string</A><A> );</A>
<BR><A>Загружает список анимационных меток из файла MD3 и возвращает его id. Метки - это особенность формата MD3: они используются для того, чтобы прикреплять объекты к разным частям модели и синхронизировать их с вершинной анимацией.</A>
<BR><A>filename - имя файла MD3.</A>
<HR>

<A name="ActorQ3TagExportMatrix"></A>
<H1 class=name>ActorQ3TagExportMatrix</H1>
<A class=type>real</A><A> = </A><A class=function>ActorQ3TagExportMatrix</A><A>( actor,taglist as </A><A class=type>real</A><A>, tagname as </A><A class=type>string</A><A>, object as </A><A class=type>real</A><A> );</A>
<BR><A>Копирует матрицу трансформации анимационной метки MD3 в матрицу трансформации объекта - то есть, прикрепляет объект к этой метке.</A>
<BR><A>actor - id актера</A>
<BR><A>taglist - id списка меток</A>
<BR><A>tagname - имя метки</A>
<BR><A>object - id объекта.</A>
<HR>

<A name="ActorLoadQ3Animations"></A>
<H1 class=name>ActorLoadQ3Animations</H1>
<A class=type>real</A><A> = </A><A class=function>ActorLoadQ3Animations</A><A>( actor as </A><A class=type>real</A><A>, filename,classname as </A><A class=type>string</A><A> );</A>
<BR><A>Загружает анимационную последовательность MD3 из файла CFG.</A>
<BR><A>actor - id актера</A>
<BR><A>filename - имя файла CFG</A>
<BR><A>classname - имя класса анимационной последовательности.</A>
<HR>

<A name="ActorMeshObjectsCount"></A>
<H1 class=name>ActorMeshObjectsCount</H1>
<A class=type>real</A><A> = </A><A class=function>ActorMeshObjectsCount</A><A>( actor as </A><A class=type>real</A><A> );</A>
<BR><A>Возвращает количество мешей в модели актера.</A>
<BR><A>actor - id актера.</A>
<HR>

<A name="ActorTriangleCount"></A>
<H1 class=name>ActorTriangleCount</H1>
<A class=type>real</A><A> = </A><A class=function>ActorTriangleCount</A><A>( actor as </A><A class=type>real</A><A> );</A>
<BR><A>Возвращает количество треугольников в модели актера.</A>
<BR><A>actor - id актера.</A>
<HR>

<A name="ActorMeshSetVisible"></A>
<H1 class=name>ActorMeshSetVisible</H1>
<A class=type>real</A><A> = </A><A class=function>ActorMeshSetVisible</A><A>( actor,mesh,mode as </A><A class=type>real</A><A> );</A>
<BR><A>Включает или выключает отображение меша актера.</A>
<BR><A>actor - id актера</A>
<BR><A>mesh - индекс меша</A>
<BR><A>mode - </A><A class=constant>true</A><A> или </A><A class=constant>false</A><A> (1 и 0 соответственно).</A>
<HR>

<A name="ActorFaceGroupsCount"></A>
<H1 class=name>ActorFaceGroupsCount</H1>
<A class=type>real</A><A> = </A><A class=function>ActorFaceGroupsCount</A><A>( actor,mesh as </A><A class=type>real</A><A> );</A>
<BR><A>Возвращает количество фейсгрупп в заданном меше актера.</A>
<BR><A>actor - id актера</A>
<BR><A>mesh - индекс меша.</A>
<HR>

<A name="ActorFaceGroupGetMaterialName"></A>
<H1 class=name>ActorFaceGroupGetMaterialName</H1>
<A class=type>real</A><A> = </A><A class=function>ActorFaceGroupGetMaterialName</A><A>( actor,mesh,fgroup as </A><A class=type>real</A><A> );</A>
<BR><A>Возвращает имя материала заданной фейсгруппы меша.</A>
<BR><A>actor - id актера</A>
<BR><A>mesh - индекс меша</A>
<BR><A>fgroup - индекс фейсгруппы.</A>
<HR>

<A name="ActorFaceGroupSetMaterial"></A>
<H1 class=name>ActorFaceGroupSetMaterial</H1>
<A class=type>real</A><A> = </A><A class=function>ActorFaceGroupSetMaterial</A><A>( actor,mesh,fgroup as </A><A class=type>real</A><A>, material as </A><A class=type>real</A><A> );</A>
<BR><A>Задает материал фейсгруппе меша. Материал должен присутствовать в библиотеке материалов, указанной при создании актера.</A>
<BR><A>actor - id актера</A>
<BR><A>mesh - индекс меша</A>
<BR><A>fgroup - индекс фейсгруппы</A>
<BR><A>material - имя материала.</A>
<HR>

</DIV>

</BODY>
</HTML>
